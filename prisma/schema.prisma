generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String        @id @default(cuid())
  password         String
  firstName        String
  lastName         String
  email            String        @unique
  phoneNumber      String
  statusType       StatusType
  isSignedUpPromos Boolean
  homeAddress      String
  homeCity         String
  homeState        String
  homeZipCode      String
  role             UserRole
  Account          Account[]
  Session          Session[]
  paymentCards     PaymentCard[]
  bookings         Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  token      String   @unique
  expires    DateTime
  identifier String

  @@unique([identifier, token])
}

model Movie {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  title      String
  category   String
  cast       String
  director   String
  producer   String
  synopsis   String
  rating     String
  status     MovieStatus
  trailerURL String      @default("")
  Showing    Show[]
  Review     Review[]
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  title     String
  content   String
  author    String
  movieId   String
  Movie     Movie    @relation(fields: [movieId], references: [id])
}

model Show {
  id                  String       @id @default(cuid())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  showTime            DateTime
  showDurationMinutes Int
  showRoomId          String?
  movieId             String
  showRoom            ShowRoom?    @relation(fields: [showRoomId], references: [id])
  SeatInShow          SeatInShow[]
  Movie               Movie        @relation(fields: [movieId], references: [id])
}

model ShowRoom {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  numberOfSeats  Int
  name           String
  currentShowing Show[]
  seats          Seat[]
}

model Seat {
  seatNumber  Int
  isOccupied  Boolean
  doesRecline Boolean      @default(false)
  showRoomId  String
  ShowRoom    ShowRoom     @relation(fields: [showRoomId], references: [id])
  SeatInShow  SeatInShow[]

  @@id([showRoomId, seatNumber])
}

model SeatInShow {
  isOccupied     Boolean
  showId         String
  seatShowRoomId String
  seatNumber     Int
  show           Show     @relation(fields: [showId], references: [id])
  seat           Seat     @relation(fields: [seatShowRoomId, seatNumber], references: [showRoomId, seatNumber])
  Ticket         Ticket[]

  @@id([showId, seatNumber])
}

model Ticket {
  id         String     @id @default(cuid())
  price      Float
  type       TicketType
  showId     String
  seatNumber Int
  bookingId  String?
  seatInShow SeatInShow @relation(fields: [showId, seatNumber], references: [showId, seatNumber])
  Booking    Booking?   @relation(fields: [bookingId], references: [id])
}

model Booking {
  id            String   @id @default(cuid())
  tax           Float
  totalPrice    Float
  promoDiscount Float
  cardNumber    String
  showDate      DateTime
  showTitle     String
  ticketTotal   Float
  userId        String
  tickets       Ticket[]
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentCard {
  id              String   @id @default(cuid())
  cardNumber      String
  cardType        CardType
  expirationMonth Int
  expirationYear  Int
  billingAddress  String
  billingCity     String
  billingState    String
  billingZipCode  String
  userId          String
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Promotion {
  id          String   @id @default(cuid())
  title       String
  description String
  discount    Float
  code        String   @unique
  startDate   DateTime
  endDate     DateTime
}

enum StatusType {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum TicketType {
  ADULT
  SENIOR
  CHILD
}

enum CardType {
  VISA
  MASTERCARD
  AMEX
  DISCOVER
}

enum MovieStatus {
  COMINGSOON
  CURRENTLYSHOWING
}
